# -*- coding: utf-8 -*-
"""TensorFlow with GPU

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/notebooks/gpu.ipynb
"""

pip install neattext

import pandas as pd
import numpy as np
# Load Data Viz Pkgs
import seaborn as sns

# Load Text Cleaning Pkgs
import neattext.functions as nfx

from sklearn.linear_model import LogisticRegression
from sklearn.naive_bayes import MultinomialNB

# Transformers
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score,classification_report,confusion_matrix

df = pd.read_csv("/content/NLP_TEXT.csv")

df.head()

df['Emotion'].value_counts()
sns.countplot(x='Emotion',data=df)


df['Clean_Text'] = df['Text'].apply(nfx.remove_userhandles)

# Stopwords
df['Clean_Text'] = df['Clean_Text'].apply(nfx.remove_stopwords)



# Features & Labels
Xfeatures = df['Clean_Text']
ylabels = df['Emotion']

#  Split Data
x_train,x_test,y_train,y_test = train_test_split(Xfeatures,ylabels,test_size=0.3,random_state=42)

# Build Pipeline
from sklearn.pipeline import Pipeline

# LogisticRegression Pipeline
pipe_lr = Pipeline(steps=[('cv',CountVectorizer()),('lr',LogisticRegression())])

# Train and Fit Data
pipe_lr.fit(x_train,y_train)




Pipeline(steps=[('cv', CountVectorizer()), ('lr', LogisticRegression())])

# Check Accuracy

pipe_lr

pipe_lr.score(x_test,y_test)


# Make A Prediction


# Prediction Prob
pipe_lr.predict_proba([ex1])


# To Know the classes
pipe_lr.classes_


# Save Model & Pipeline
import joblib
pipeline_file = open("NLP_Model.pkl","wb")
joblib.dump(pipe_lr,pipeline_file)
pipeline_file.close()

ex1 = "Valimai Naage Vera Mari is So Enjoyable and Fans are very happy"

pipe_lr.predict([ex1])